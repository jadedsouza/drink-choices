[{"/Users/jadedsouza/Desktop/group09skodawgs/src/index.js":"1","/Users/jadedsouza/Desktop/group09skodawgs/src/reportWebVitals.js":"2","/Users/jadedsouza/Desktop/group09skodawgs/src/App.js":"3","/Users/jadedsouza/Desktop/group09skodawgs/src/About.js":"4","/Users/jadedsouza/Desktop/group09skodawgs/src/Home.js":"5","/Users/jadedsouza/Desktop/group09skodawgs/src/Bars.js":"6"},{"size":581,"mtime":1623277765882,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1621823524023,"results":"9","hashOfConfig":"8"},{"size":7001,"mtime":1623344919431,"results":"10","hashOfConfig":"8"},{"size":3865,"mtime":1623428333233,"results":"11","hashOfConfig":"8"},{"size":12488,"mtime":1623461607863,"results":"12","hashOfConfig":"8"},{"size":17907,"mtime":1623461520292,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1lmo8ds",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":1,"source":"30"},"/Users/jadedsouza/Desktop/group09skodawgs/src/index.js",[],["31","32"],"/Users/jadedsouza/Desktop/group09skodawgs/src/reportWebVitals.js",[],"/Users/jadedsouza/Desktop/group09skodawgs/src/App.js",["33","34","35","36","37","38","39","40","41","42","43","44","45"],"import React, { Component } from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport App from './App';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport { HomePage, MoodForm } from './Home';\nimport { About } from './About';\nimport { BarsPage } from './Bars';\nimport _ from 'lodash';\nimport * as d3c from 'd3-collection';\nimport * as d3 from 'd3';\nimport './index.css'; //import css file!\nimport firebase from 'firebase/app';\n\n\nclass App2 extends Component {\n    render() {\n        return (<div>\n            <TopBar></TopBar>\n            <Router>\n                <div className=\"container\">\n                    <Link to=\"/\">Home</Link>\n                    {' - '}\n                    <Link to=\"/bars\">Local Bars</Link>\n                    {' - '}\n                    <Link to=\"/about\">About</Link>\n                    <Route exact path=\"/\" component={HomePage} />\n                    <Route path=\"/bars\" component={BarsPage} />\n                    <Route path=\"/about\" component={About} />\n                </div>\n            </Router>\n        </div>\n        );\n    }\n}\n\n\nclass TopBar extends Component {\n    render() {\n        return (\n            <header className=\"container-fluid head\">\n                <div className=\"topBar\">\n                    <div className=\"col-lg-offset-1 col-lg-0\">\n                        <h1 className=\"top-logo drinkingchoices\">Drink Choices</h1>\n                    </div>\n                    <div className=\"col-lg-offset-3 col-lg-3\">\n                    </div>\n                </div>\n            </header>\n        );\n    }\n}\n\n\nclass TryMe extends Component {\n    constructor(props) {\n        super(props);\n        this.updateSelection = this.updateSelection.bind(this);\n        this.state = {\n            drinks: [],\n            keys: [],\n            selectedDrink: ''\n        };\n    }\n\n    updateSelection = (selection) => {\n        this.setState({selectedDrink: selection});\n\n    }\n\n    componentDidMount() {\n        d3.csv('data/data.csv').then((d) => {\n            this.setState({ drinks: d, keys: d3c.keys(d[0]) });\n        });\n    }\n    \n    getRandom() {\n        console.log(this.props);\n        // let drinkCardArray = this.props.drink.drinks.map();\n        // console.log(drinkCardArray);\n    }\n    \n    render() {\n        this.getRandom();\n        return \"cutie\";\n    }\n}\n\n\n\n\nclass IngSidebar extends Component {\n    render() {\n        return (\n            <aside className=\"sidebar green\" id=\"container\">\n                <div className=\"ingredients-side\">\n                    <div className=\"title\">Chosen feelings of your day</div>\n                    <img src=\"./assets/media/cocktail_shaker.png\" className=\"shaker\" />\n                    <div className=\"sidebox\">\n                        <ul className='side-list' id='answer-list'></ul>\n                    </div>\n                    <div className=\"ingredients-confirm\">\n                    </div>\n                </div>\n            </aside>\n        );\n    }\n}\n\n\nclass InstrMidBox extends Component {\n    render() {\n        return (\n            <div className='container-fluid instructions-box'>\n                <div className=\"row\">\n                    <div className=\"col-lg-9\">\n\n                        <label className=\"main-title\">Here's Your Match:</label>\n                        <div className=\"instructions-list\">\n                        </div>\n                    </div>\n                    <div className=\"col-lg-3\">\n                        <label className=\"main-title\">Other Options:</label>\n                        <div className=\"drink-side-list\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nclass InstrSidebar extends Component {\n    render() {\n        return (\n            <aside className=\"sidebar blue\" id=\"container\">\n                <div className=\"ingredients-side\">\n                    <div className=\"title links\">Link to recipe:</div>\n                    <div className=\"sidebox\">\n                        <ul className='links-side-list' id=\"links-list\"></ul>\n                    </div>\n                </div><br />\n                <div className=\"suggestion-side\">\n                    <div className=\"title links\">Suggest a drink:</div>\n                    <form id=\"suggestion-form\">\n                        <label htmlFor=\"drinkSug\">What's the name?</label><br />\n                        <input type=\"text\" id=\"drinkSug\" name=\"drinkSug\" required />\n                        <label htmlFor=\"moodSug\">What mood does this fit?</label><br />\n                        <select name=\"moodSug\" id=\"moodSug\">\n                            <option value=\"DEFAULT\" disabled>-- select a mood --</option>\n                            <option value=\"1\"> Happy </option>\n                            <option value=\"2\"> Sad </option>\n                            <option value=\"3\"> Excited </option>\n                            <option value=\"4\"> Tired </option>\n                            <option value=\"5\"> Angry </option>\n                        </select><br />\n                        <label htmlFor=\"typeSug\">What type of drink?</label><br />\n                        <select name=\"typeSug\" id=\"typeSug\">\n                            <option value=\"DEFAULT\" disabled>-- select a type --</option>\n                            <option value=\"1\"> Alcoholic </option>\n                            <option value=\"2\"> Non-Alcoholic </option>\n                        </select><br />\n                        <label htmlFor=\"linkSug\">Copy + Paste reciple link? [optional]</label><br />\n                        <input type=\"text\" name=\"linkSug\" id=\"linkSug\" /><br />\n                        <br />\n                        <input type=\"submit\" className=\"submitSug\" value=\"Submit\" style={{ color: '#202427' }} />\n                    </form>\n                </div>\n            </aside>\n        );\n    }\n}\n\n\nclass cheersMidBox extends Component {\n    render() {\n        return (\n            <div className='container-fluid cheers-box'>\n                <div className=\"row\">\n                    <div className=\"col-lg-9\">\n\n                        <label className=\"main-title\">Here's your drink:</label>\n                        <div className=\"main-title drink\" id=\"drinkName\"></div>\n                        <div className=\"main-title\" id=\"drinkImg\"></div>\n                        <div className=\"main-title\">That'll be $500.</div>\n\n                    </div>\n                    <div className=\"col-lg-3\">\n                    </div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\n\nclass rightPanel extends Component {\n    render() {\n        return (\n            <div className=\"right-panel\">\n                <div className=\"ingredients-mini right-side\">Describe:</div>\n                <div className=\"instructions-mini right-side\">Random Drink</div>\n                <div className=\"results-mini right-side\">Cheers</div>\n            </div>\n        );\n    }\n}\n\n\nexport default App2;","/Users/jadedsouza/Desktop/group09skodawgs/src/About.js",["46","47","48"],"import React, { Component } from 'react';\nimport {\n    Card, CardImg, CardText, CardBody,\n    CardTitle, CardSubtitle, Button\n} from 'reactstrap';\n\n\nexport class About extends Component { \n    render() { \n        return (\n            <div className=\"about\">\n                <AboutText></AboutText>\n                <OurTeam></OurTeam>\n            </div>\n        ) \n        \n    }\n}\n\nclass AboutText extends Component { \n    render() { \n        return (\n            <div className=\"about-text\">\n                <h2>About Our Project</h2>\n                <p>Everyone deserves to be able to sit back and enjoy their time off after working for long periods. With so much energy put into daily tasks, how can you choose a drink that will feel rewarding and match what you need?</p>\n                <p>There's no need to invest anymore energy that you may not have. In our app, you can get a selection of drinks (alcoholic or non-alcoholic) based on how you are feeling. Simply choose a \"vibe\" that you are feeling and we will suggest drinks that will hit the spot. It will also tell you where you can purchase the drink at a local business.</p>\n                <p>Enjoy experimenting with drink choices. A reminder for alcoholic drinkers to <i>drink responsibly</i>!</p>                \n            </div>\n        ) \n        \n    }\n}\n\nclass OurTeam extends Component {\n        render() { \n        const mystyle = {\n            border: '1px white',\n            marginTop: '10px',\n            marginBottom: '10px',\n            marginLeft: '20px',\n            float: 'center'\n        };\n        \n        return (\n        <div>\n        <h2>Authors and Contact Information</h2>\n                <ul>\n                <div class = \"flex-container2\">\n                <div class=\"flex1\">\n                <Card style={mystyle}>\n                <CardImg className=\"about-images\" img src={\"img/jade.png\"} alt=\"image of woman with hoop earrings\" />\n                <CardBody>\n                    <CardTitle>Jade D'Souza</CardTitle>\n                    <CardText>email: jadedsou@uw.edu </CardText>\n                    <CardText>favorite drink: pina colada </CardText>\n                </CardBody>\n                </Card>\n                </div>\n                <div class=\"flex1\">\n                <Card style={mystyle}>\n                <CardImg className=\"about-images\" img src={\"img/nick.png\"} alt=\"image of a man with a corndog\" />\n                <CardBody>\n                    <CardTitle>Nicholas Liang</CardTitle>\n                    <CardText>email: liangn@uw.edu </CardText>\n                    <CardText>favorite drink: tequila shot, salt + lime</CardText>\n                </CardBody>\n                </Card>\n                </div>\n                <div class=\"flex1\">\n                <Card style={mystyle}>\n                <CardImg className=\"about-images\" img src={\"img/kavya.png\"} alt=\"image of woman with winged eyeliner\" />\n                <CardBody>\n                <CardTitle>Kavya Iyer</CardTitle>\n                    <CardText>email: kavyai@uw.edu </CardText>\n                    <CardText>favorite drink: moscow mule</CardText>\n                </CardBody>\n                </Card>\n                </div>\n                <div class=\"flex1\">\n                <Card style={mystyle}>\n                <CardImg className=\"about-images\" img src={\"img/israel.png\"} alt=\"image of a man by a sunset\" />\n                <CardBody>\n                <CardTitle>Israel Martinez</CardTitle>\n                    <CardText>email: israelma@uw.edu </CardText>\n                    <CardText>favorite drink: <a href=\"https://www.liquor.com/recipes/adios-motherfucker-2/\" target=\"_blank\">AMF</a> (look up the full form ;))!</CardText>\n                </CardBody>\n                </Card>\n                </div>\n                </div>\n                </ul>\n                </div>\n        )\n    }\n}\n","/Users/jadedsouza/Desktop/group09skodawgs/src/Home.js",["49","50","51","52","53","54","55","56","57"],"import React, { Component } from 'react';\nimport * as d3c from 'd3-collection';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\nimport {\n    Card, CardImg, CardText, CardBody,\n    CardTitle, CardSubtitle, Button\n} from 'reactstrap';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport './index.css'; //import css file!\n\nexport class HomePage extends Component {\n    constructor(props) {\n        super(props);\n        this.updateSelection = this.updateSelection.bind(this);\n        this.state = {\n            drinks: [],\n            randDrinks: [],\n            keys: [],\n            selectedDrink: '', \n            randomDrink: false\n        };\n    }\n\n    updateSelection = (selection) => {\n        this.setState({ selectedDrink: selection });\n        console.log(this.state.selectedDrink, this.state.randomDrink, 'combo');\n    }\n\n    updateRandom = (randBoolean) => {\n        this.setState({ randomDrink: randBoolean })\n        console.log(randBoolean, 'randbool');\n    }\n\n    componentDidMount() {\n        //d3.csv('data/data.csv').then((d) => {\n        //    this.setState({ drinks: d, keys: d3c.keys(d[0]) });\n        //});\n        //console.log(this.state.drinks, \"this.state.drinks\"); //this is child nodes of each parent\n        this.data = firebase.database().ref('data')\n        this.data.on('value', (snapshot) => { \n            let tweets = snapshot.val();\n            let d = Object.values(tweets);\n            let k = Object.keys(d[0]);\n\n            this.setState({drinks: d, keys: k});\n        });\n        //hello.set({author: \"jade\", drink: \"AMF\", image: \"\", link:\"xxx.w..com\", mood: \"angry\", type: \"nonAlcoholic\"}).catch(err => console.log(err));\n        //console.log(this.data, 'firebase');\n\n        this.randData = firebase.database().ref('random');\n        this.randData.on('value', (snapshot) => {\n            let rDrinks = snapshot.val();\n            let r = Object.values(rDrinks);\n            let k = Object.keys(r[0]);\n\n            this.setState({randDrinks: r, keys: k});\n        })\n    }\n    render() {\n        return (\n            <div className=\"home-elements\">\n                <DrinkCardRow drink={this.state} />\n                {/* {console.log(this.state.keys, \"this.state.keys2\")}  */}\n                <IntroText selDrink={this.state.selectedDrink}></IntroText>\n                <br />\n                <DrinkSelection drink={this.state} updateSelection={this.updateSelection} updateRandom={this.updateRandom}/>\n                <br />\n            </div>\n        );\n    }\n}\n\n\n\n/*function MyButton() {\n\n    let handleClick = function (event) {\n    }\n    //this.props.name, this.props.soup\n    //make a button with an `onClick` attribute!\n    //this \"registers\" the listener and sets the callback\n    return <input onClick={handleClick} type=\"submit\" className=\"submit\" value=\"Submit\" style={{ color: '#202427' }} />;\n}*/\n\nclass IntroText extends Component {\n    render() {\n        return (\n            <div className=\"landing-text\">\n                <h1 className=\"logo text\">\n                </h1>\n                <h3 className=\"slogan text\">\n                    <span>Woop Woop!</span><span></span>\n                </h3>\n\n                <p className=\"landing-instructions text\">Let's figure out how to customize drinks together</p>\n                <div className='martini-box'>\n                    <div className='whoosh'>Let's begin.</div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nclass DrinkCard extends Component {\n    render() {\n        const mystyle = {\n            border: '1px black',\n            marginTop: '10px',\n            float: 'center'\n        };\n        const visiStyle = {color: 'black'};\n        \n        return (\n            <Card style={mystyle}>\n                <CardImg className=\"bar-card-images\" src={this.props.value.image} alt=\"Card image cap\" />\n                <CardBody>\n                    <CardTitle tag=\"h5\">{this.props.value.drink}</CardTitle>\n                    {/* <CardSubtitle>Mood: {this.props.value.mood} {this.props.value.type}</CardSubtitle> */}\n                    <CardText> Recipe created by: {this.props.value.author}</CardText>\n                    <Button><a style={visiStyle} href={this.props.value.link} target=\"_blank\">{'View Recipe!'}</a></Button>\n                </CardBody>\n            </Card>\n\n        );\n    }\n}\n\nclass DrinkCardRow extends Component {\n    render() {\n        let drinkKeys = this.props.drink.drinks.map((item) => {\n            return item;\n        });\n\n        // let num = Math.floor(Math.random() * drinkKeys.length);\n\n        let drinkCardArray = this.props.drink.drinks.map((item) => {\n            let drinkOption = this.props.drink.selectedDrink;\n            //we return a drink card based on the users input\n            if (drinkOption.includes(item.type) && drinkOption.includes(item.mood)) {\n                return (<DrinkCard value={item} key={item.drink} />);\n            }\n        })\n\n        let randKeys = this.props.drink.randDrinks.map((item) => {\n            return item;\n        });\n        let num = Math.floor(Math.random() * randKeys.length);\n        // console.log(randKeys, this.props.drink.randomDrink, num, 'randkeys');\n        \n        //try me functionality here\n        // if (num == 10) {\n        //     num = 9;\n        // }\n        // if (num == 0) {\n        //     num = 2;\n        // }\n\n        let emptyArrayFlag = true;\n        for (var i = 0; i < drinkCardArray.length; i++) {\n            if (drinkCardArray[i] != null) {\n                emptyArrayFlag = false;\n            }\n        }\n        let drinkRandomlyChosen = randKeys[num];\n        console.log(drinkRandomlyChosen, this.props.drink.randomDrink, 'randomdrink');\n\n        if (this.props.drink.randomDrink) {\n            drinkCardArray = this.props.drink.randDrinks.map((item) => {\n                // console.log(item);\n                if (item === drinkRandomlyChosen) {\n                    // console.log(item.drink, 'randomcard');\n                    return (<DrinkCard value={item} key={item.drink} />);\n                }\n            })\n        }\n        \n        // if (emptyArrayFlag) {\n        //     drinkCardArray = this.props.drink.drinks.map((item) => {\n        //         if (item === drinkRandomlyChosen) {\n        //             console.log(item.mood, item.type, 'mood type');\n        //             return (<DrinkCard value={item} key={item.drink} />);\n        //         }\n        //     })\n        // }\n\n        //making sure that card is only displayed when drink is chosen\n        let drinkHeader = \"\";\n        let drinkOption = this.props.drink.selectedDrink;\n    \n        if (this.props.drink.randomDrink) {\n            drinkOption = \"true\";\n        } \n        if (drinkOption === \"\" || drinkOption === \"DEFAULT\") {\n            drinkHeader = \"\";\n        }\n        else {\n            drinkHeader = \"Chosen Drink for you!\"\n        }\n\n        //returning the drink\n        return (\n            <div className=\"drink-chosen random\">\n                <h2>{drinkHeader}</h2>\n                {drinkCardArray}\n            </div>\n        );\n    }\n}\n\nclass OneMood extends Component {\n\n\n    render() {\n        return (\n            <option value={(this.props.value.mood) + (this.props.value.type)} >\n                {this.props.value.mood + ' '} {this.props.value.type + ' beverage'}\n            </option>\n        );\n    }\n}\n\n\nclass DrinkSelection extends Component {\n\n    handleClick = (item) => {\n        this.props.updateSelection(item.target.value);\n        this.props.updateRandom(false);\n        console.log(item.target.value, \"in handle click!!!!!!!!\");\n        // this.setState({selectedDrink: item.target.value});\n        this.selectedDrink = item.target.value;\n\n    }\n\n    randomClick = () => {\n        this.props.updateRandom(true);\n    }\n\n    render() {\n        // let dataItems = this.props.keys.map((item) => {\n        //     return (\n        //         <option\n        //             key={item}\n        //             text={item}\n        //             onClick={() => this.props.clickHandler(item)}>\n        //             {item}\n        //         </option>\n        //     )\n        // })\n        let moodArray = [<option value=\"DEFAULT\">{'-- select a vibe --'}</option>];\n\n        this.props.drink.drinks.map((item) => {\n            if (!moodArray.includes(item.mood)) {\n                //const handleClick = () => {this.props.updateSelection(this.props.drink.drinks.mood)\n                //this.handleClick(item.mood)\n                moodArray.push(<OneMood value={item} key={item.link} />);\n\n\n            }\n            return moodArray;\n\n        });\n        // let test = (this.props.drink.drinks.map((item)=> { \n        // }));\n        return (\n            <div className='drink-selection'>\n                <div className='container-fluid ingredients-box'>\n                    <div className=\"titles\">\n                        <div className=\"col-lg-9\">\n                            <form>\n                                <label htmlFor=\"moods\" className=\"main-title\">\n                                    How are you feeling today?\n                                    <div >\n                                        <select name=\"types\" id=\"types\" onChange={this.handleClick} defaultValue={moodArray[0]}>\n                                            {/* <option value=\"DEFAULT\" selected defaultValue>{'-- select a vibe --'}</option> */}\n                                            {moodArray}\n                                        </select>\n                                    </div>\n\n\n                                </label><br />\n                                <br />\n                                {/* <br />\n                                <label htmlFor=\"types\" className=\"main-title\">What kind of drink?</label><br />\n                                \n                                    <option value=\"DEFAULT\" disabled>-- select a type --</option>\n                                    <option value=\"1\"> Alcoholic </option>\n                                    <option value=\"2\"> Non-Alcoholic </option>\n                                </select><br />\n                                <br /> */}\n\n                            </form>\n\n                            <div className=\"col-lg-offset-0 col-lg-0\">\n                                <div className='random-centered random-title'> can't decide?\n                                    <div>\n                                        <button className=\"random random-centered button main-title\" onClick={this.randomClick}>Try Me!</button>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n// class RandomSelect extends Component {\n//     randomDrink() {\n//         let drinkKeys = Object.keys(DRINKS);\n//         let num = Math.floor(Math.random() * drinkKeys.length);\n//         drinkType = drinkKeys[num];\n//         num = Math.floor(Math.random() * DRINKS[drinkType].length)\n//         if (drinkType == 'alcoholic' && num == 4) {\n//             num = num - 1;\n//         }\n\n//         return renderDrink(drinkType, DRINKS[drinkType][num].mood);\n//     }\n\n//     render() {\n//         return (\n\n//         );\n//     }\n// }\n\n/*class IngMidBox extends Component {\n    render() {\n        return (\n            <div className='container-fluid ingredients-box'>\n                <div className=\"row\">\n                    <div className=\"col-lg-9\">\n                        <MoodForm></MoodForm>\n                    </div>\n\n                </div>\n\n            </div>\n        );\n    }\n}*/\n\n/*class MoodForm extends Component {\n\n    render() {\n        return (\n            <form>\n                <label htmlFor=\"moods\" className=\"main-title\">How are you feeling today?</label><br />\n                <select name=\"moods\" id=\"moods\">\n                    <option disabled selected value>-- select a mood --</option>\n                </select><br />\n                <br />\n                <label htmlFor=\"types\" className=\"main-title\">What kind of drink?</label><br />\n                <select name=\"types\" id=\"types\">\n                    <option disabled selected value>-- select a type --</option>\n                </select><br />\n                <br />\n                <input type=\"submit\" className=\"submit\" value=\"Submit\" style=\"color: #202427;\" />\n            </form>\n        );\n    }\n}*/\n\n\n","/Users/jadedsouza/Desktop/group09skodawgs/src/Bars.js",["58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78"],"import React, { Component } from 'react';\nimport * as d3c from 'd3-collection';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\nimport {\n    Card, CardImg, CardText, CardBody,\n    CardTitle, CardSubtitle, Button\n} from 'reactstrap';\nimport './index.css'; //import css file!\nimport { MDBCol } from \"mdbreact\";\nimport 'firebase/database';\nimport firebase from 'firebase/app';\n\n\nexport class BarsPage extends Component {\n    constructor(props) {\n        super(props);\n        this.updateSelection = this.updateSelection.bind(this);\n        this.updateBookmarks = this.updateBookmarks.bind(this);\n        this.state = {\n            bar: [],\n            keys: [],\n            selectedZipcode: [],\n            bookmarks: [],\n            isChecked: false\n        };\n    }\n    updateSelection = (selection) => {\n        let tempAry = this.state.selectedZipcode;\n        let exists = true;\n        if (tempAry.length > 0) {\n            for (var i = 0; i < this.state.selectedZipcode.length; i++) {\n                // Verify whether there's a match\n                if (tempAry[i] == selection) {\n                    tempAry.splice(i, 1);\n                    exists = true;\n                } else {\n                    exists = false;\n                }\n            }\n            if (exists == false) {\n                tempAry.push(selection);\n            }\n        } else {\n            tempAry.push(selection);\n        }\n        // console.log(selection, 'selection');\n        // console.log(tempAry, 'arr');\n        this.setState( {selectedZipcode: tempAry} );\n\n        // if (this.state.selectedZipcode.length > 0) {\n        //     let checks = 0;\n        //     // Loop through each\n        //     for (var i = 0; i < this.state.selectedZipcode.length; i++) {\n        //         // Verify whether there's a match\n        //         if (this.state.selectedZipcode[i] != selection) {\n        //             checks++;\n        //         }\n        //         // If no matches, add it to the state array\n        //         if (checks == this.state.selectedZipcode.length) {\n        //             tempAry.push(selection);\n        //             this.setState({ selectedZipcode: tempAry });\n        //         }\n        //     }\n        // } else {\n        //     // Automatically add if array is empty\n        //     tempAry.push(selection);\n        //     this.setState({ selectedZipcode: tempAry });\n        // }\n        // //let zipOption = this.props.barState.selectedZipcode;\n        // //1. go through all of the checkboxes and put it into a map.\n        // //2. get each boolean isChecked value and put it into an array\n        // //3. if a boolean value is false, use its index, and get the zip code from the map.\n        //     // once this is done, remove the zip code from the array. khalas\n        // let allBarsFromState = this.state.bar;\n        // for (var i = 0; i < allBarsFromState.length; i++) {\n        //     let barItself = allBarsFromState[i];\n        //     if (barItself.zipcode === this.state.selectedZipcode) {\n        //         barItself.isChosen = true;\n        //     }\n        //     else {\n        //         barItself.isChosen = false;\n        //     }\n        //     allBarsFromState[i] = barItself;\n        // }\n    }\n\n    updateBookmarks = (bar) => {\n        let tempBook = this.state.bookmarks;\n        console.log(bar.clicked, 'bar.clicked');\n        // If bar item received has clicked as false (from unchecking a Bookmark)\n        if (!bar.clicked) {\n            // Loop through each bookmark until it matches bar\n            for (var i = 0; i < this.state.bookmarks.length; i++) {\n                // Remove when match is found\n                if (this.state.bookmarks[i].name == bar.name) {\n                    tempBook.splice(i, 1);\n                    this.setState({ bookmarks: tempBook });\n                }\n            }\n        } else {\n            // If there is anything in the state\n            if (this.state.bookmarks.length > 0) {\n                let checks = 0;\n                // Loop through each\n                for (var i = 0; i < this.state.bookmarks.length; i++) {\n                    // Verify whether there's a match\n                    if (this.state.bookmarks[i].name != bar.name) {\n                        checks++;\n                    }\n                    // If no matches, add it to the state array\n                    if (checks == this.state.bookmarks.length) {\n                        tempBook.push(bar);\n                        this.setState({ bookmarks: tempBook });\n                    }\n                }\n            } else {\n                // Automatically add if array is empty\n                tempBook.push(bar);\n                this.setState({ bookmarks: tempBook });\n            }\n        }\n    }\n\n    handleChange(event) {\n        let field = event.target.name; // which input\n        let value = event.target.value; // what value\n\n        let changes = {}; // object to hold changes\n        changes[field] = value; // change this field\n        this.setState(changes); // update state\n    }\n\n    componentDidMount() {\n        // d3.csv('data/bars.csv').then((d) => {\n        //     this.setState({ bar: d, keys: d3c.keys(d[0]) });\n        // });\n        this.barJSON = firebase.database().ref('bars')\n        this.barJSON.on('value', (snapshot) => {\n            let tweets = snapshot.val();\n            let d = Object.values(tweets);\n            let k = Object.keys(d[0]);\n\n\n            this.setState({ bar: d, keys: k });\n        });\n        // this.barsRef = firebase.database().ref('bars');\n\n        // // When the \"tweets\" *value* changes, update the state appropriately (`tweets`)\n        // this.barsRef.on('value', (snapshot) => { \n        //     let bar = snapshot.val();\n        //     this.setState({bar: bar});\n        // });\n\n    }\n    render() {\n\n        return (\n            <div>\n                <BarIntroText />{/* \n                <ZipSelection barState={this.state} updateSelection={this.updateSelection} /> */}\n                <RowCheckboxes barState={this.state} updateSelection={this.updateSelection} />\n                <div className=\"mscardssitch\"> <BarCardRow barState={this.state} bookmarkCallback={this.updateBookmarks} />\n                    <div className=\"bookMarksClassName\">\n                        <Bookmarks bookState={this.state} bookmarkCallback={this.updateBookmarks} />\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nclass BarIntroText extends Component {\n    render() {\n        return (\n            <div>\n                <h2> Explore and Bookmark Local Bars Near You</h2>\n                <p>\n                    While you can always make drinks at home, going out to local bars is a great way to save time while also supporting the businesses around your area. Using the search bar, look up your area code to see if there are any bars we recommend near you.\n                </p>\n            </div>\n        );\n    }\n}\n\nclass SearchBar extends Component {\n    render() {\n        return (\n            <MDBCol md=\"6\">\n                <label htmlFor=\"header-search\">\n                    <span className=\"visually-hidden\">Search bars</span>\n                </label>\n                <div className=\"active-pink-3 active-pink-4 mb-4\">\n                    <input className=\"form-control\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" />\n                </div>\n            </MDBCol>\n        );\n    }\n}\n\nclass ZipCodes extends Component {\n    render() {\n        return (\n            <option value={(this.props.value.zipcode)} >\n                {/* {console.log(\"currently in zipcode comp: \" + this.props.value.zipcode)} */}\n                {this.props.value.zipcode}\n            </option>\n        );\n    }\n}\n\nclass ZipCodeCheckBox extends Component {\n    render() {\n\n        return (\n            //     <form>\n            //         <label> Select Neighborhoods:\n            //     <input name=\"checkZip\"value=\"hi\" id=\"checkbox\" onChange={this.handleClick}>\n\n            //         {this.zipArray}\n            //     </input>\n            //     </label>\n            // </form>\n            <div className=\"zipcode-checkbox\">\n                <input type=\"checkbox\" value={(this.props.value.zipcode)} id={(this.props.value.zipcode)}\n                />{this.props.value.zipcode}\n            </div>\n        );\n\n    }\n}\n\nclass RowCheckboxes extends Component {\n    constructor(props) {\n        super(props);\n    }\n    handleClick = (item) => {\n        // console.log(item, \"in rowchecbox handle click\");\n        this.props.barState.bar.isChecked = !this.props.barState.bar.isChecked;\n        // if (this.props.barState.isChecked == true) {\n        //     this.props.updateSelection(item.target.value);\n        //     //this.selectedZipcode.push(item.target.value);\n        // } else { \n        //     this.props.updateSelection('');\n        //     this.selectedZipcode = '';\n        // }\n        this.props.updateSelection(item.target.value);\n\n\n    }\n    render() {\n        let zipArray = [];\n        this.props.barState.bar.map((item) => {\n            var itemIsChosen = item.ischosen + \"\";\n            if (!zipArray.includes(item.zipcode)) {\n                { item.ischosen = itemIsChosen }\n                // console.log(item.isChosen, \"in ifstatement rn\");\n                zipArray.push(<div className=\"zipcode-checkbox\">\n                    {/* {console.log(itemIsChosen, \"in render\")} */}\n                    <input type=\"checkbox\" value={(item.zipcode)} id={(item.id)} ischosen={itemIsChosen} onChange={this.handleClick} />{item.zipcode}\n                </div>);\n            }\n            return zipArray;\n\n        });\n        return (\n            <div >\n                {zipArray}\n            </div>\n        );\n    }\n}\n\nclass ZipSelection extends Component {\n\n    handleClick = (item) => {\n        this.props.updateSelection(item.target.value);\n        this.selectedZipcode = item.target.value;\n\n    }\n\n    render() {\n        let zipArray = [];\n        this.props.barState.bar.map((item) => {\n            if (!zipArray.includes(item.zipcode)) {\n                zipArray.push(<ZipCodes value={item} key={item.id} />);\n\n            }\n            return zipArray;\n        });\n\n        return (\n            <div className='zip-selection'>\n                <div className='container-fluid ingredients-box'>\n                    <div className=\"titles\">\n                        <div className=\"col-lg-9\">\n                            <form>\n                                <label htmlFor=\"moods\" className=\"main-title\">\n                                    Choose Your Neighborhood By Zipcode\n                                    <div >\n                                        <select name=\"types\" id=\"types\" onChange={this.handleClick}>\n                                            <option value=\"DEFAULT\">{'-- select a neighborhood --'}</option>\n                                            {zipArray}\n                                        </select>\n                                    </div>\n\n                                </label><br />\n                                <br />\n\n\n                            </form>\n\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass BarCard extends Component {\n    handleButtonClick = (item) => {\n        //this.props.updateSelection(item.target.value);\n        //this.selectedZipcode = item.target.value;\n\n        //this.props.updateBookmarks(item);\n        let barsRef = firebase.database().ref('bars');\n        let bookmarks = barsRef.child(this.props.id + '/bookmarks');\n        // Issue a transaction on the number of likes to increase it by 1\n        bookmarks.transaction((d) => d + 1);\n\n        // CALLBACKS for bookmarks\n        this.props.bar['clicked'] = true;\n        this.props.bookCardCall(this.props.bar);\n        // bookmark = (<Bookmarks/>);\n        // this.props.bookmarksSlide({bookmarked: bookmark});\n    }\n\n    render() {\n        const mystyle = {\n            border: '1px white',\n            marginTop: '10px',\n            marginBottom: '10px',\n            float: 'center'\n        };\n        const visiStyle = {color: 'black'};\n        const buttonStyle = { marginLeft: '10px', color: '#9A0A35' };\n        return (\n            <Card style={mystyle}>\n                <CardImg className=\"bar-card-images\" src={this.props.bar.img} alt={this.props.bar.imgalt} />\n                <CardBody>\n                    <CardTitle> Bar Name: {this.props.bar.name}</CardTitle>\n                    <CardSubtitle> Zipcode: {this.props.bar.zipcode}</CardSubtitle>\n                    <CardText> Address: {this.props.bar.address}</CardText>\n                    <Button className =\"visit-website\"><a style={visiStyle} href={this.props.bar.website} target=\"_blank\">{'Visit Website'}</a></Button>\n                    <Button className=\"bookmark-in-bars\" style={buttonStyle} onClick={this.handleButtonClick}>Cheers to Bookmark: {this.props.bookies}</Button>\n                </CardBody>\n            </Card>\n\n        );\n    }\n}\n\nclass BarCardRow extends Component {\n    constructor(props) {\n        super(props);\n        this.bookmarkCallback = this.bookmarkCallback.bind(this);\n    }\n    updateBookmarks(cardId) {\n        // Create a reference to the number of likes\n        let barsRef = firebase.database().ref('bars');\n        let bookmarks = barsRef.child(cardId + '/bookmarks');\n        // Issue a transaction on the number of likes to increase it by 1\n        bookmarks.transaction((d) => d + 1);\n    }\n\n    bookmarkCallback(bar) {\n        // this.state.barBooked = bar;\n        this.props.bookmarkCallback(bar);\n    }\n\n    render() {\n        let barCardArray = this.props.barState.bar.map((item) => {\n            let barOption = this.props.barState.selectedZipcode;\n            // console.log(barOption, \"in barcard row\");\n            if (barOption.includes(item.zipcode)) {\n                return (<BarCard bar={item} key={item.id} update={(item) => this.updateBookmarks(item.id)}\n                    id={item.id} bookies={item.bookmarks} bookCardCall={this.bookmarkCallback} />);\n                // in barcardrow it should look to see what options have been selected\n                //based on those, it renders the correct ones. \n            }\n\n        })\n\n        // let topThreeArray = new Map();\n        // topThreeArray = this.props.barState.bar.map((item) => {\n        //     var book = item.bookmarks;\n        //     let names = item.name;\n        //     //return ({ [book]: names });\n        //     return({[book]:names});\n        //     //could do top three filtering here itself\n        // })\n\n        let topThreeNames = [];\n        let count = 0;\n        let topThreeValues = this.props.barState.bar.map((item) => {\n            topThreeNames[count++] = item.name;\n            return item.bookmarks;\n        });\n\n        topThreeValues.sort()\n\n        let n = topThreeValues.length;\n        let onlyThreeValues = [topThreeValues[n - 1], topThreeValues[n - 2], topThreeValues[n - 3]];\n\n        let newTopThreeNames = this.props.barState.bar.map((item) => {\n            if (onlyThreeValues.includes(item.bookmarks)) {\n                return item.name;\n            }\n        });\n        let topThreeWithoutUndefined = [];\n        let countt = 0;\n        let myTopThreeBadBitches = \"Your Choice of Top 3 bars (doesn't break ties!): \";\n        for (var i = 0; i < newTopThreeNames.length; i++) {\n            if (newTopThreeNames[i] != null) {\n                topThreeWithoutUndefined[countt++] = newTopThreeNames[i];\n                myTopThreeBadBitches = myTopThreeBadBitches + newTopThreeNames[i] + \", \";\n            }\n        }\n        myTopThreeBadBitches = myTopThreeBadBitches.substring(0, ((myTopThreeBadBitches.length) - 2));\n\n\n        let barHeader = \"\";\n        let zipOption = this.props.barState.selectedZipcode;\n\n        if (zipOption === \"\" || zipOption === \"DEFAULT\" || zipOption.length == 0) {\n            barHeader = \"\";\n        }\n        else {\n            barHeader = \"Bars In Your Area\"\n        }\n        return (\n            <div className=\"bar-chosen-random\">\n                <br></br>\n                {myTopThreeBadBitches}\n                <h2>{barHeader}</h2>\n                {barCardArray}\n            </div>\n        );\n    }\n}\n\n\nclass Bookmarks extends Component {\n    // constructor(props) {\n    //     super(props);\n    //     // this.state = {\n    //     //     books = this.props.bookState.bookmarks\n    //     // }\n    // }\n    handleClick = (item) => {\n        let removeBar = this.props.bookState.bookmarks.map((bookmark) => {\n\n            if (bookmark.id == item.target.id) {\n                bookmark.clicked = false;\n                return bookmark;\n            }\n        });\n        this.props.bookmarkCallback(removeBar[0]);\n    }\n\n    render() {\n        let bookArr = this.props.bookState.bookmarks.map((item) => {\n            let name = item.name;\n            let link = item.website;\n            let id = item.id\n            let address = item.address;\n            return (<li id={id}>Bar ~ <a href={link}>{name}</a> ~ {address}</li>)\n        });\n\n        let bookHeader = \"\";\n        let bookControl = \"\";\n        if (this.props.bookState.bookmarks.length == 0) {\n            bookHeader = \"\";\n            bookControl = \"\";\n        }\n        else {\n            bookHeader = \"Bookmarks\";\n            bookControl = \"(select bar to remove)\"\n        }\n\n        return (\n            <div className=\"bookmarks-side\">\n                <h2>{bookHeader}</h2>\n                <h5>{bookControl}</h5>\n                <div className=\"sidebox\">\n                    <ul className='links-side-list' id=\"links-list\" onClick={this.handleClick}>{bookArr}</ul>\n                </div>\n            </div>\n        );\n    }\n}\n\n// class TopThree extends Component { \n//     render() { \n//         return (); \n//     }\n// }\n\n\n\n\n",{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":2,"column":8,"nodeType":"85","messageId":"86","endLine":2,"endColumn":16},{"ruleId":"83","severity":1,"message":"87","line":2,"column":20,"nodeType":"85","messageId":"86","endLine":2,"endColumn":26},{"ruleId":"83","severity":1,"message":"88","line":3,"column":8,"nodeType":"85","messageId":"86","endLine":3,"endColumn":11},{"ruleId":"83","severity":1,"message":"89","line":5,"column":20,"nodeType":"85","messageId":"86","endLine":5,"endColumn":28},{"ruleId":"83","severity":1,"message":"90","line":8,"column":8,"nodeType":"85","messageId":"86","endLine":8,"endColumn":9},{"ruleId":"83","severity":1,"message":"91","line":12,"column":8,"nodeType":"85","messageId":"86","endLine":12,"endColumn":16},{"ruleId":"83","severity":1,"message":"92","line":54,"column":7,"nodeType":"85","messageId":"86","endLine":54,"endColumn":12},{"ruleId":"83","severity":1,"message":"93","line":91,"column":7,"nodeType":"85","messageId":"86","endLine":91,"endColumn":17},{"ruleId":"94","severity":1,"message":"95","line":97,"column":21,"nodeType":"96","endLine":97,"endColumn":88},{"ruleId":"83","severity":1,"message":"97","line":110,"column":7,"nodeType":"85","messageId":"86","endLine":110,"endColumn":18},{"ruleId":"83","severity":1,"message":"98","line":133,"column":7,"nodeType":"85","messageId":"86","endLine":133,"endColumn":19},{"ruleId":"83","severity":1,"message":"99","line":175,"column":7,"nodeType":"85","messageId":"86","endLine":175,"endColumn":19},{"ruleId":"83","severity":1,"message":"100","line":198,"column":7,"nodeType":"85","messageId":"86","endLine":198,"endColumn":17},{"ruleId":"83","severity":1,"message":"101","line":4,"column":16,"nodeType":"85","messageId":"86","endLine":4,"endColumn":28},{"ruleId":"83","severity":1,"message":"102","line":4,"column":30,"nodeType":"85","messageId":"86","endLine":4,"endColumn":36},{"ruleId":"103","severity":1,"message":"104","line":85,"column":47,"nodeType":"96","messageId":"105","endLine":85,"endColumn":126,"fix":"106"},{"ruleId":"83","severity":1,"message":"107","line":2,"column":13,"nodeType":"85","messageId":"86","endLine":2,"endColumn":16},{"ruleId":"83","severity":1,"message":"108","line":3,"column":13,"nodeType":"85","messageId":"86","endLine":3,"endColumn":15},{"ruleId":"83","severity":1,"message":"90","line":4,"column":8,"nodeType":"85","messageId":"86","endLine":4,"endColumn":9},{"ruleId":"83","severity":1,"message":"101","line":7,"column":16,"nodeType":"85","messageId":"86","endLine":7,"endColumn":28},{"ruleId":"103","severity":1,"message":"104","line":123,"column":29,"nodeType":"96","messageId":"105","endLine":123,"endColumn":95,"fix":"109"},{"ruleId":"83","severity":1,"message":"110","line":133,"column":13,"nodeType":"85","messageId":"86","endLine":133,"endColumn":22},{"ruleId":"111","severity":1,"message":"112","line":139,"column":65,"nodeType":"113","messageId":"114","endLine":139,"endColumn":67},{"ruleId":"83","severity":1,"message":"115","line":164,"column":17,"nodeType":"85","messageId":"86","endLine":164,"endColumn":31},{"ruleId":"111","severity":1,"message":"112","line":171,"column":69,"nodeType":"113","messageId":"114","endLine":171,"endColumn":71},{"ruleId":"83","severity":1,"message":"107","line":2,"column":13,"nodeType":"85","messageId":"86","endLine":2,"endColumn":16},{"ruleId":"83","severity":1,"message":"108","line":3,"column":13,"nodeType":"85","messageId":"86","endLine":3,"endColumn":15},{"ruleId":"83","severity":1,"message":"90","line":4,"column":8,"nodeType":"85","messageId":"86","endLine":4,"endColumn":9},{"ruleId":"116","severity":1,"message":"117","line":34,"column":32,"nodeType":"118","messageId":"119","endLine":34,"endColumn":34},{"ruleId":"116","severity":1,"message":"117","line":41,"column":24,"nodeType":"118","messageId":"119","endLine":41,"endColumn":26},{"ruleId":"116","severity":1,"message":"117","line":96,"column":50,"nodeType":"118","messageId":"119","endLine":96,"endColumn":52},{"ruleId":"120","severity":1,"message":"121","line":106,"column":26,"nodeType":"85","messageId":"122","endLine":106,"endColumn":27},{"ruleId":"116","severity":1,"message":"123","line":108,"column":54,"nodeType":"118","messageId":"119","endLine":108,"endColumn":56},{"ruleId":"116","severity":1,"message":"117","line":112,"column":32,"nodeType":"118","messageId":"119","endLine":112,"endColumn":34},{"ruleId":"83","severity":1,"message":"124","line":187,"column":7,"nodeType":"85","messageId":"86","endLine":187,"endColumn":16},{"ruleId":"83","severity":1,"message":"125","line":213,"column":7,"nodeType":"85","messageId":"86","endLine":213,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":235,"column":5,"nodeType":"128","messageId":"129","endLine":237,"endColumn":6},{"ruleId":"130","severity":1,"message":"131","line":257,"column":17,"nodeType":"132","messageId":"133","endLine":257,"endColumn":49},{"ruleId":"83","severity":1,"message":"134","line":275,"column":7,"nodeType":"85","messageId":"86","endLine":275,"endColumn":19},{"ruleId":"103","severity":1,"message":"104","line":357,"column":56,"nodeType":"96","messageId":"105","endLine":357,"endColumn":123,"fix":"135"},{"ruleId":"111","severity":1,"message":"112","line":385,"column":63,"nodeType":"113","messageId":"114","endLine":385,"endColumn":65},{"ruleId":"111","severity":1,"message":"112","line":418,"column":67,"nodeType":"113","messageId":"114","endLine":418,"endColumn":69},{"ruleId":"116","severity":1,"message":"117","line":438,"column":77,"nodeType":"118","messageId":"119","endLine":438,"endColumn":79},{"ruleId":"111","severity":1,"message":"112","line":464,"column":71,"nodeType":"113","messageId":"114","endLine":464,"endColumn":73},{"ruleId":"116","severity":1,"message":"117","line":466,"column":29,"nodeType":"118","messageId":"119","endLine":466,"endColumn":31},{"ruleId":"116","severity":1,"message":"117","line":485,"column":51,"nodeType":"118","messageId":"119","endLine":485,"endColumn":53},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'render' is defined but never used.","'App' is defined but never used.","'MoodForm' is defined but never used.","'_' is defined but never used.","'firebase' is defined but never used.","'TryMe' is defined but never used.","'IngSidebar' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'InstrMidBox' is defined but never used.","'InstrSidebar' is defined but never used.","'cheersMidBox' is defined but never used.","'rightPanel' is defined but never used.","'CardSubtitle' is defined but never used.","'Button' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"138","text":"139"},"'d3c' is defined but never used.","'d3' is defined but never used.",{"range":"140","text":"139"},"'drinkKeys' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'emptyArrayFlag' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'i' is already defined.","redeclared","Expected '!==' and instead saw '!='.","'SearchBar' is defined but never used.","'ZipCodeCheckBox' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'ZipSelection' is defined but never used.",{"range":"141","text":"139"},"no-global-assign","no-unsafe-negation",[3656,3656]," rel=\"noreferrer\"",[4242,4242],[12818,12818]]